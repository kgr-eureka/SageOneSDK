# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.bank_transfer import BankTransfer  # noqa: E501
from openapi_client.rest import ApiException

class TestBankTransfer(unittest.TestCase):
    """BankTransfer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BankTransfer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.bank_transfer.BankTransfer()  # noqa: E501
        if include_optional :
            return BankTransfer(
                legacy_id = 56, 
                id = '0', 
                displayed_as = '0', 
                path = '0', 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                transaction = openapi_client.models.base.Base(
                    legacy_id = 56, 
                    id = '0', 
                    displayed_as = '0', 
                    __path = '0', ), 
                transaction_type = openapi_client.models.base.Base(
                    legacy_id = 56, 
                    id = '0', 
                    displayed_as = '0', 
                    __path = '0', ), 
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                from_bank_account = openapi_client.models.bank_account.BankAccount(
                    legacy_id = 56, 
                    id = '0', 
                    displayed_as = '0', 
                    __path = '0', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    bank_account_details = openapi_client.models.bank_account_details.BankAccountDetails(
                        account_name = '0', 
                        account_number = '0', 
                        sort_code = '0', 
                        bic = '0', 
                        iban = '0', ), 
                    ledger_account = openapi_client.models.base.Base(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', ), 
                    bank_account_type = openapi_client.models.base.Base(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', ), 
                    balance = 1.337, 
                    main_address = openapi_client.models.address.Address(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        bank_account = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        contact = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        address_type = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        name = '0', 
                        address_line_1 = '0', 
                        address_line_2 = '0', 
                        city = '0', 
                        region = '0', 
                        postal_code = '0', 
                        country = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        country_group = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        is_main_address = True, ), 
                    main_contact_person = openapi_client.models.bank_account_contact.BankAccountContact(
                        name = '0', 
                        job_title = '0', 
                        telephone = '0', 
                        mobile = '0', 
                        email = '0', 
                        fax = '0', ), 
                    nominal_code = 56, 
                    editable = True, 
                    deletable = True, 
                    journal_code = openapi_client.models.journal_code.JournalCode(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '0', 
                        code = '0', 
                        journal_code_type = openapi_client.models.journal_code_type.JournalCodeType(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        control_name = '0', 
                        reserved = True, ), 
                    default_payment_method = openapi_client.models.base.Base(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', ), ), 
                to_bank_account = openapi_client.models.bank_account.BankAccount(
                    legacy_id = 56, 
                    id = '0', 
                    displayed_as = '0', 
                    __path = '0', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    bank_account_details = openapi_client.models.bank_account_details.BankAccountDetails(
                        account_name = '0', 
                        account_number = '0', 
                        sort_code = '0', 
                        bic = '0', 
                        iban = '0', ), 
                    ledger_account = openapi_client.models.base.Base(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', ), 
                    bank_account_type = openapi_client.models.base.Base(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', ), 
                    balance = 1.337, 
                    main_address = openapi_client.models.address.Address(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        bank_account = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        contact = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        address_type = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        name = '0', 
                        address_line_1 = '0', 
                        address_line_2 = '0', 
                        city = '0', 
                        region = '0', 
                        postal_code = '0', 
                        country = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        country_group = openapi_client.models.base.Base(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        is_main_address = True, ), 
                    main_contact_person = openapi_client.models.bank_account_contact.BankAccountContact(
                        name = '0', 
                        job_title = '0', 
                        telephone = '0', 
                        mobile = '0', 
                        email = '0', 
                        fax = '0', ), 
                    nominal_code = 56, 
                    editable = True, 
                    deletable = True, 
                    journal_code = openapi_client.models.journal_code.JournalCode(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '0', 
                        code = '0', 
                        journal_code_type = openapi_client.models.journal_code_type.JournalCodeType(
                            legacy_id = 56, 
                            id = '0', 
                            displayed_as = '0', 
                            __path = '0', ), 
                        control_name = '0', 
                        reserved = True, ), 
                    default_payment_method = openapi_client.models.base.Base(
                        legacy_id = 56, 
                        id = '0', 
                        displayed_as = '0', 
                        __path = '0', ), ), 
                date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                reference = '0', 
                amount = 1.337, 
                description = '0'
            )
        else :
            return BankTransfer(
        )

    def testBankTransfer(self):
        """Test BankTransfer"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
